We did not specify target: execute all; APPLICATION was defined => execute all1
all1: etc tools src app img

ETC
=======
etc: config eposcfg eposcc.conf eposmkbi.conf
config: config.h (config always execute?)
    defines SMOD, ARCH, MACH, etc. in config.h
eposcfg: FORCE
    removes eposcfg executable
eposcc.conf and eposmkbi.conf: FORCE
    use eposcfg to build .conf files (which I suppose are used by tools?)
=======

TOOLS
=======
Mostly, just compile them
=======

SRC
=======
src: utility architecture machine api setup boot system init

    UTIL
    =======
    just compiles utility/ and groups it inside lib/libutil_sifive_e.a
    =======

    ARCH
    =======
    forwards to rv32,
    
        RV32
        =======
        compiles crts and installs them under lib/crtxxx_sifive_e.o, then compiles the cpu/mmu/tsc _inits and their corresponding
        _inits and places them under libarch and libinit.
        =======
    =======

    MACH
    =======
    Does common and places them under libmach, then forwards to riscv
    //!: what is common for?

        RISCV
        =======
        Compiles ic/machine/timer and their corresponding _inits and places them under libmach and libinit.
        =======
    =======

    API
    =======
    Same with libsys.
    =======

    SETUP
    =======
    If SETUP is NOT_USED, then just install the .o file under lib/
    =======

    SYSTEM
    =======
    links system_binding.o + system_scaffold.o together under system_sifive.o and installs it and application_scaffold
    (now application_sifive_e) under lib/ 
    =======

    INIT
    =======
    Just renames the inits and places them under lib/
    =======
=======

APP
=======
eposcc is finally used. Compiles the application with eposcc, links it, and then installs it under img/

=======

EPOSCC
=======
language=C
link_objs=hello.o
//!: Note various different compiler flags are used throughout the build.
=======

IMG
=======
Flashing/GDB/QEMU stuff; not important for now
=======

CLEAN
=======
-clean:
    etc: resets config.h
    app: do nothing?
    src: everything below src? or excludes system, image, init?
    img: do nothing?
-cleanapps:
    clean for every app
-veryclean: clean cleanapps cleantest
=======

DEFS
=======


=======

Doubts:
- Does epos need eposcfg to use makedefs?
- I saw .sdata as section 1 (right after .init), werent we assuming they would
    be contiguous on the logical address space?

/usr/local/rv32/bin/riscv32-unknown-linux-gnu-g++ -c -Wl, -mno-relax -O -std=c++14 -nostdinc --no-exceptions --no-rtti --no-use-cxa-atexit
--no-asynchronous-unwind-tables -fno-stack-protector -fno-pie -fdata-sections -ffunction-sections -Wall -Werror -Wno-builtin-declaration-mismatch
-Wno-array-bounds -Wno-attribute-alias
-Wno-placement-new -Wno-class-memaccess -Wno-address-of-packed-member -Wattributes -I/home/alek/so2/nicolas2/so2_remote/include elf.cc


--no-warn-mismatch 

usr/local/rv32/bin/riscv32-unknown-linux-gnu-ld --no-relax -nostdlib -L/home/alek/so2/nicolas2/so2_remote/lib -Bstatic 
-L`/usr/local/rv32/bin/riscv32-unknown-linux-gnu-gcc -ansi -c -Wl, 
-mno-relax -O -nostdinc -fno-stack-protector -fno-pie -Wno-builtin-declaration-mismatch 
-Wno-array-bounds -Wno-address-of-packed-member -print-file-name=` --nmagic \
        --section-start .init=0x80010000 \
        --section-start .sdata=0x80040000 \
        --entry=_init -o system_sifive_e \
        /home/alek/so2/nicolas2/so2_remote/lib/crtbegin_sifive_e.o \
        system_scaffold.o system_binding.o \
        /home/alek/so2/nicolas2/so2_remote/lib/crtend_sifive_e.o \
        --whole-archive \
        -lsys_sifive_e -lmach_sifive_e -larch_sifive_e \
        --no-whole-archive \
        -lutil_sifive_e -linit_sifive_e -lgcc


GDB
=======
0x81000000 -> 16MB
0x80100000 -> 1MB

INIT:     0x80200000; 
SYS_CODE: 0x80300000;
SYS_DATA: 0x80400000;

find 0x80000000, 0x8fffffff, (char) 0x7F , 'E', 'L', 'F'       
0x80000004
0x80019b6c
0x8006ec00
0x8013a538

entry_point     setup 0x80000080

init global constructors

app entry 


=======
        